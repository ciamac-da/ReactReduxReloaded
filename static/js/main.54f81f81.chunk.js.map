{"version":3,"sources":["index.js"],"names":["ConnectedApp","connect","ok","dispatch","increment","type","adapter","variant","color","onClick","store","createStore","state","hmm","so","action","ReactDOM","render","document","getElementById"],"mappings":"gPAyEA,IAAMA,EA1BUC,aARhB,YACE,MAAO,CAAEC,GADuB,EAANA,OAZ5B,SAA4BC,GAC1B,MAAO,CACLC,UAAW,WAAYD,EAAS,CAAEE,KAAK,kBA4CtBC,EAhBrB,YAA6B,IAAfJ,EAAc,EAAdA,GAAGE,EAAW,EAAXA,UACf,OAAO,oCACP,kBAAC,IAAD,CACAG,QAAQ,YACRC,MAAM,YACNC,QAASL,GAHT,QAKYF,OAiBRQ,EAAQC,aAnEd,WAA4D,IAA1CC,EAAyC,uDAAjC,CAAEV,GAAG,EAAGW,IAAK,EAAGC,GAAI,GAAKC,EAAQ,uCAIzD,MAHqB,cAAhBA,EAAOV,OACVO,EAAK,2BAAQA,GAAR,IAAeV,GAAIU,EAAMV,GAAK,KAE9BU,KAqETI,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAACV,EAAD,OAEFkB,SAASC,eAAe,W","file":"static/js/main.54f81f81.chunk.js","sourcesContent":["\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\n/*\n  Der Reducer verwaltet den [state]\n    - Gibt es noch keinen state kann er sich einen ausdenken :)\n    - Er bekommen Nachrichten, sogenannte Actions\n      und gibt den neuen state zurück.\n*/\n\nfunction reducer( state = { ok:0, hmm: 0, so: 0 }, action ){\n  if ( action.type === 'increment' ){\n    state = { ...state, ok: state.ok + 1 }\n  }\n  return state;\n}\n\n/*\n  Die [mapActionsToProps] stellt der verbundenen Komponente\n    einfache Funktionen zur verfügung um Nachrichten an den reducer\n    schicken.\n*/\n\nfunction mapActionsToProps( dispatch ){\n  return {\n    increment: function(){ dispatch({ type:'increment' }) }\n  };\n}\n\n/*\n  mapStateToProps mach aus unserem State die Props die\n    durch den adapter an die verbundenen (connect) Komponenten\n    weitergegeben werden.\n*/\n\nfunction mapStateToProps( { ok } ){\n  return { ok };\n}\n\n/*\n  Der adapter ist eine Funktion die mit der [connect] Funtion erzeugt wird\n    - als erstes argument nimmt connect  eine [mapStateToProps] Funtion an\n*/\nconst adapter = connect(\n  mapStateToProps,\n  mapActionsToProps\n);\n\n/*\n  Die [App] Komponente ist erstmal nicht verbunden, d.h. sie bekommt keine\n    Props aus dem state ohne das wir den adapter benutzen.\n*/\n\nfunction App({ok,increment}){\n  return <>\n  <Button \n  variant=\"contained\" \n  color=\"secondary\"\n  onClick={increment}\n  >\n        Ok!: {ok}\n      </Button>\n  </>;\n}\n\n/*\n  Deswegen erzeigen wir eine neue Komponente mit dme [adapter]\n*/\n\nconst ConnectedApp = adapter(App);\n\n/*\n  Die [createStore] Funktion erzuegt aus einem reducer\n    einen store den man mit der Provider Komponente an alle\n    [children] weitergeben kann.\n*/\n\nconst store = createStore(reducer);\n\n/*\n  Provider nimmt den [store] und stellt ihn allen [children] zur verügung\n*/\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedApp/>\n  </Provider>\n, document.getElementById('root'));\n"],"sourceRoot":""}